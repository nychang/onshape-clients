/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.96
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

/* tslint:disable:no-unused-locals */
import { OpenAPI } from '../model/openAPI';

import { ObjectSerializer, Authentication, HttpBasicAuth, ApiKeyAuth, OAuth, VoidAuth } from '../model/models';

let defaultBasePath = 'https://cad.onshape.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DefaultApiApiKeys {
}

export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * @summary OpenAPI spec documentation for the Onshape REST API.
     * @param fileType The type of file to return. Defaults to JSON.
     * @param excludedTags If an operation contains an excluded tag, it is not returned from this endpoint.
     * @param includedTags Return at most all the operations with tags included in includedTags. If not given, this will default to all tags.
     * @param documentationStatus Only return endpoints that have the specified document status. Default is to return all the keys the user should have access to.
     */
    public getOpenApi (fileType?: 'json' | 'yaml', excludedTags?: string, includedTags?: string, documentationStatus?: Array<'DEVELOPMENT' | 'PRODUCTION' | 'STAGING' | 'EVP' | 'UNSET' | 'INTERNAL'>) : Promise<{ response: http.ClientResponse; body: OpenAPI;  }> {
        const localVarPath = this.basePath + '/api/openapi';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (fileType !== undefined) {
            localVarQueryParameters['fileType'] = ObjectSerializer.serialize(fileType, "'json' | 'yaml'");
        }

        if (excludedTags !== undefined) {
            localVarQueryParameters['excludedTags'] = ObjectSerializer.serialize(excludedTags, "string");
        }

        if (includedTags !== undefined) {
            localVarQueryParameters['includedTags'] = ObjectSerializer.serialize(includedTags, "string");
        }

        if (documentationStatus !== undefined) {
            localVarQueryParameters['documentationStatus'] = ObjectSerializer.serialize(documentationStatus, "Array<'DEVELOPMENT' | 'PRODUCTION' | 'STAGING' | 'EVP' | 'UNSET' | 'INTERNAL'>");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OpenAPI;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OpenAPI");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
