"use strict";
/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.96
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
var models_1 = require("../model/models");
var defaultBasePath = 'https://cad.onshape.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var AppElementsApiApiKeys;
(function (AppElementsApiApiKeys) {
})(AppElementsApiApiKeys = exports.AppElementsApiApiKeys || (exports.AppElementsApiApiKeys = {}));
var AppElementsApi = /** @class */ (function () {
    function AppElementsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'OAuth2': new models_1.OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AppElementsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppElementsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AppElementsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AppElementsApi.prototype.setApiKey = function (key, value) {
        this.authentications[AppElementsApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(AppElementsApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OAuth2.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @summary Commit Transaction
     * @param did
     * @param eid
     * @param wid
     * @param tid
     * @param bTAppElementCommitTransactionParams
     */
    AppElementsApi.prototype.commitTransaction = function (did, eid, wid, tid, bTAppElementCommitTransactionParams) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/w/{wid}/e/{eid}/transactions/{tid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)))
            .replace('{' + 'tid' + '}', encodeURIComponent(String(tid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling commitTransaction.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling commitTransaction.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling commitTransaction.');
        }
        // verify required parameter 'tid' is not null or undefined
        if (tid === null || tid === undefined) {
            throw new Error('Required parameter tid was null or undefined when calling commitTransaction.');
        }
        // verify required parameter 'bTAppElementCommitTransactionParams' is not null or undefined
        if (bTAppElementCommitTransactionParams === null || bTAppElementCommitTransactionParams === undefined) {
            throw new Error('Required parameter bTAppElementCommitTransactionParams was null or undefined when calling commitTransaction.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAppElementCommitTransactionParams, "BTAppElementCommitTransactionParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementModifyInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create Element.
     * @param did
     * @param wid
     * @param bTAppElementParams
     */
    AppElementsApi.prototype.create7 = function (did, wid, bTAppElementParams) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/w/{wid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling create7.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling create7.');
        }
        // verify required parameter 'bTAppElementParams' is not null or undefined
        if (bTAppElementParams === null || bTAppElementParams === undefined) {
            throw new Error('Required parameter bTAppElementParams was null or undefined when calling create7.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAppElementParams, "BTAppElementParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementModifyInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create Reference
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param bTAppElementReferenceParams
     */
    AppElementsApi.prototype.createReference1 = function (did, eid, wvm, wvmid, bTAppElementReferenceParams) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling createReference1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling createReference1.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling createReference1.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling createReference1.');
        }
        // verify required parameter 'bTAppElementReferenceParams' is not null or undefined
        if (bTAppElementReferenceParams === null || bTAppElementReferenceParams === undefined) {
            throw new Error('Required parameter bTAppElementReferenceParams was null or undefined when calling createReference1.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAppElementReferenceParams, "BTAppElementReferenceParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementReferenceInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a Sub-element
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param sid
     * @param transactionId
     * @param parentChangeId
     * @param description
     */
    AppElementsApi.prototype.deleteContent1 = function (did, eid, wvm, wvmid, sid, transactionId, parentChangeId, description) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements/{sid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'sid' + '}', encodeURIComponent(String(sid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling deleteContent1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling deleteContent1.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling deleteContent1.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling deleteContent1.');
        }
        // verify required parameter 'sid' is not null or undefined
        if (sid === null || sid === undefined) {
            throw new Error('Required parameter sid was null or undefined when calling deleteContent1.');
        }
        if (transactionId !== undefined) {
            localVarQueryParameters['transactionId'] = models_1.ObjectSerializer.serialize(transactionId, "string");
        }
        if (parentChangeId !== undefined) {
            localVarQueryParameters['parentChangeId'] = models_1.ObjectSerializer.serialize(parentChangeId, "string");
        }
        if (description !== undefined) {
            localVarQueryParameters['description'] = models_1.ObjectSerializer.serialize(description, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementModifyInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete Reference
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param rid
     * @param transactionId
     * @param parentChangeId
     * @param description
     */
    AppElementsApi.prototype.deleteReference1 = function (did, eid, wvm, wvmid, rid, transactionId, parentChangeId, description) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'rid' + '}', encodeURIComponent(String(rid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling deleteReference1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling deleteReference1.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling deleteReference1.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling deleteReference1.');
        }
        // verify required parameter 'rid' is not null or undefined
        if (rid === null || rid === undefined) {
            throw new Error('Required parameter rid was null or undefined when calling deleteReference1.');
        }
        if (transactionId !== undefined) {
            localVarQueryParameters['transactionId'] = models_1.ObjectSerializer.serialize(transactionId, "string");
        }
        if (parentChangeId !== undefined) {
            localVarQueryParameters['parentChangeId'] = models_1.ObjectSerializer.serialize(parentChangeId, "string");
        }
        if (description !== undefined) {
            localVarQueryParameters['description'] = models_1.ObjectSerializer.serialize(description, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementReferenceInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get History
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     */
    AppElementsApi.prototype.getHistory = function (did, eid, wvm, wvmid) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/history'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getHistory.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getHistory.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getHistory.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getHistory.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementHistoryInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get Content
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param transactionId
     * @param changeId
     * @param baseChangeId
     * @param subelementId
     * @param linkDocumentId
     */
    AppElementsApi.prototype.getSubElementContent = function (did, eid, wvm, wvmid, transactionId, changeId, baseChangeId, subelementId, linkDocumentId) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getSubElementContent.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getSubElementContent.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getSubElementContent.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getSubElementContent.');
        }
        if (transactionId !== undefined) {
            localVarQueryParameters['transactionId'] = models_1.ObjectSerializer.serialize(transactionId, "string");
        }
        if (changeId !== undefined) {
            localVarQueryParameters['changeId'] = models_1.ObjectSerializer.serialize(changeId, "string");
        }
        if (baseChangeId !== undefined) {
            localVarQueryParameters['baseChangeId'] = models_1.ObjectSerializer.serialize(baseChangeId, "string");
        }
        if (subelementId !== undefined) {
            localVarQueryParameters['subelementId'] = models_1.ObjectSerializer.serialize(subelementId, "string");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementContentInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get Sub-element IDs
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param transactionId
     * @param changeId
     */
    AppElementsApi.prototype.getSubelementIds = function (did, eid, wvm, wvmid, transactionId, changeId) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/ids'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getSubelementIds.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getSubelementIds.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getSubelementIds.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getSubelementIds.');
        }
        if (transactionId !== undefined) {
            localVarQueryParameters['transactionId'] = models_1.ObjectSerializer.serialize(transactionId, "string");
        }
        if (changeId !== undefined) {
            localVarQueryParameters['changeId'] = models_1.ObjectSerializer.serialize(changeId, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementModifyInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Resolve Reference
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param rid
     * @param transactionId
     * @param parentChangeId
     * @param includeInternal
     * @param linkDocumentId
     */
    AppElementsApi.prototype.resolveReference1 = function (did, eid, wvm, wvmid, rid, transactionId, parentChangeId, includeInternal, linkDocumentId) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'rid' + '}', encodeURIComponent(String(rid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling resolveReference1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling resolveReference1.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling resolveReference1.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling resolveReference1.');
        }
        // verify required parameter 'rid' is not null or undefined
        if (rid === null || rid === undefined) {
            throw new Error('Required parameter rid was null or undefined when calling resolveReference1.');
        }
        if (transactionId !== undefined) {
            localVarQueryParameters['transactionId'] = models_1.ObjectSerializer.serialize(transactionId, "string");
        }
        if (parentChangeId !== undefined) {
            localVarQueryParameters['parentChangeId'] = models_1.ObjectSerializer.serialize(parentChangeId, "string");
        }
        if (includeInternal !== undefined) {
            localVarQueryParameters['includeInternal'] = models_1.ObjectSerializer.serialize(includeInternal, "boolean");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementReferenceResolveInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Start Transaction
     * @param did
     * @param eid
     * @param wid
     * @param bTAppElementStartTransactionParams
     */
    AppElementsApi.prototype.startTransaction = function (did, eid, wid, bTAppElementStartTransactionParams) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/w/{wid}/e/{eid}/transactions'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling startTransaction.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling startTransaction.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling startTransaction.');
        }
        // verify required parameter 'bTAppElementStartTransactionParams' is not null or undefined
        if (bTAppElementStartTransactionParams === null || bTAppElementStartTransactionParams === undefined) {
            throw new Error('Required parameter bTAppElementStartTransactionParams was null or undefined when calling startTransaction.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAppElementStartTransactionParams, "BTAppElementStartTransactionParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementModifyInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update Element
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param bTAppElementUpdateParams
     */
    AppElementsApi.prototype.update5 = function (did, eid, wvm, wvmid, bTAppElementUpdateParams) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling update5.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling update5.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling update5.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling update5.');
        }
        // verify required parameter 'bTAppElementUpdateParams' is not null or undefined
        if (bTAppElementUpdateParams === null || bTAppElementUpdateParams === undefined) {
            throw new Error('Required parameter bTAppElementUpdateParams was null or undefined when calling update5.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAppElementUpdateParams, "BTAppElementUpdateParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementModifyInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update Reference
     * @param did
     * @param eid
     * @param wvm
     * @param wvmid
     * @param rid
     * @param bTAppElementReferenceParams
     */
    AppElementsApi.prototype.updateReference1 = function (did, eid, wvm, wvmid, rid, bTAppElementReferenceParams) {
        var localVarPath = this.basePath + '/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'rid' + '}', encodeURIComponent(String(rid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling updateReference1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling updateReference1.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling updateReference1.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling updateReference1.');
        }
        // verify required parameter 'rid' is not null or undefined
        if (rid === null || rid === undefined) {
            throw new Error('Required parameter rid was null or undefined when calling updateReference1.');
        }
        // verify required parameter 'bTAppElementReferenceParams' is not null or undefined
        if (bTAppElementReferenceParams === null || bTAppElementReferenceParams === undefined) {
            throw new Error('Required parameter bTAppElementReferenceParams was null or undefined when calling updateReference1.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAppElementReferenceParams, "BTAppElementReferenceParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "BTAppElementReferenceInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AppElementsApi;
}());
exports.AppElementsApi = AppElementsApi;
