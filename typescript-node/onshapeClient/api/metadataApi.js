"use strict";
/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.96
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
/* tslint:disable:no-unused-locals */
var models_1 = require("../model/models");
var defaultBasePath = 'https://cad.onshape.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var MetadataApiApiKeys;
(function (MetadataApiApiKeys) {
})(MetadataApiApiKeys = exports.MetadataApiApiKeys || (exports.MetadataApiApiKeys = {}));
var MetadataApi = /** @class */ (function () {
    function MetadataApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'OAuth2': new models_1.OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(MetadataApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetadataApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    MetadataApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    MetadataApi.prototype.setApiKey = function (key, value) {
        this.authentications[MetadataApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(MetadataApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OAuth2.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param did
     * @param vid
     * @param eid
     * @param otype
     * @param oid
     * @param pid
     * @param configuration
     * @param linkDocumentId
     */
    MetadataApi.prototype.getVEOPStandardContentMetadata = function (did, vid, eid, otype, oid, pid, configuration, linkDocumentId) {
        var localVarPath = this.basePath + '/api/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/p/{pid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'vid' + '}', encodeURIComponent(String(vid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'otype' + '}', encodeURIComponent(String(otype)))
            .replace('{' + 'oid' + '}', encodeURIComponent(String(oid)))
            .replace('{' + 'pid' + '}', encodeURIComponent(String(pid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getVEOPStandardContentMetadata.');
        }
        // verify required parameter 'vid' is not null or undefined
        if (vid === null || vid === undefined) {
            throw new Error('Required parameter vid was null or undefined when calling getVEOPStandardContentMetadata.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getVEOPStandardContentMetadata.');
        }
        // verify required parameter 'otype' is not null or undefined
        if (otype === null || otype === undefined) {
            throw new Error('Required parameter otype was null or undefined when calling getVEOPStandardContentMetadata.');
        }
        // verify required parameter 'oid' is not null or undefined
        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getVEOPStandardContentMetadata.');
        }
        // verify required parameter 'pid' is not null or undefined
        if (pid === null || pid === undefined) {
            throw new Error('Required parameter pid was null or undefined when calling getVEOPStandardContentMetadata.');
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param pid
     * @param configuration
     * @param linkDocumentId
     * @param inferMetadataOwner
     */
    MetadataApi.prototype.getWMVEPMetadata = function (did, wvm, wvmid, eid, pid, configuration, linkDocumentId, inferMetadataOwner) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p/{pid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'pid' + '}', encodeURIComponent(String(pid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getWMVEPMetadata.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getWMVEPMetadata.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getWMVEPMetadata.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getWMVEPMetadata.');
        }
        // verify required parameter 'pid' is not null or undefined
        if (pid === null || pid === undefined) {
            throw new Error('Required parameter pid was null or undefined when calling getWMVEPMetadata.');
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (inferMetadataOwner !== undefined) {
            localVarQueryParameters['inferMetadataOwner'] = models_1.ObjectSerializer.serialize(inferMetadataOwner, "boolean");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param configuration
     * @param linkDocumentId
     * @param inferMetadataOwner
     */
    MetadataApi.prototype.getWMVEPsMetadata = function (did, wvm, wvmid, eid, configuration, linkDocumentId, inferMetadataOwner) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getWMVEPsMetadata.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getWMVEPsMetadata.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getWMVEPsMetadata.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getWMVEPsMetadata.');
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (inferMetadataOwner !== undefined) {
            localVarQueryParameters['inferMetadataOwner'] = models_1.ObjectSerializer.serialize(inferMetadataOwner, "boolean");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wv
     * @param wvid
     * @param eid
     * @param configuration
     * @param linkDocumentId
     * @param inferMetadataOwner
     */
    MetadataApi.prototype.getWVEMetadata = function (did, wv, wvid, eid, configuration, linkDocumentId, inferMetadataOwner) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wv}/{wvid}/e/{eid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wv' + '}', encodeURIComponent(String(wv)))
            .replace('{' + 'wvid' + '}', encodeURIComponent(String(wvid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getWVEMetadata.');
        }
        // verify required parameter 'wv' is not null or undefined
        if (wv === null || wv === undefined) {
            throw new Error('Required parameter wv was null or undefined when calling getWVEMetadata.');
        }
        // verify required parameter 'wvid' is not null or undefined
        if (wvid === null || wvid === undefined) {
            throw new Error('Required parameter wvid was null or undefined when calling getWVEMetadata.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getWVEMetadata.');
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (inferMetadataOwner !== undefined) {
            localVarQueryParameters['inferMetadataOwner'] = models_1.ObjectSerializer.serialize(inferMetadataOwner, "boolean");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wv
     * @param wvid
     * @param linkDocumentId
     * @param inferMetadataOwner
     */
    MetadataApi.prototype.getWVEsMetadata = function (did, wv, wvid, linkDocumentId, inferMetadataOwner) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wv}/{wvid}/e'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wv' + '}', encodeURIComponent(String(wv)))
            .replace('{' + 'wvid' + '}', encodeURIComponent(String(wvid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getWVEsMetadata.');
        }
        // verify required parameter 'wv' is not null or undefined
        if (wv === null || wv === undefined) {
            throw new Error('Required parameter wv was null or undefined when calling getWVEsMetadata.');
        }
        // verify required parameter 'wvid' is not null or undefined
        if (wvid === null || wvid === undefined) {
            throw new Error('Required parameter wvid was null or undefined when calling getWVEsMetadata.');
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (inferMetadataOwner !== undefined) {
            localVarQueryParameters['inferMetadataOwner'] = models_1.ObjectSerializer.serialize(inferMetadataOwner, "boolean");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wv
     * @param wvid
     * @param linkDocumentId
     * @param inferMetadataOwner
     */
    MetadataApi.prototype.getWVMetadata = function (did, wv, wvid, linkDocumentId, inferMetadataOwner) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wv}/{wvid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wv' + '}', encodeURIComponent(String(wv)))
            .replace('{' + 'wvid' + '}', encodeURIComponent(String(wvid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getWVMetadata.');
        }
        // verify required parameter 'wv' is not null or undefined
        if (wv === null || wv === undefined) {
            throw new Error('Required parameter wv was null or undefined when calling getWVMetadata.');
        }
        // verify required parameter 'wvid' is not null or undefined
        if (wvid === null || wvid === undefined) {
            throw new Error('Required parameter wvid was null or undefined when calling getWVMetadata.');
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (inferMetadataOwner !== undefined) {
            localVarQueryParameters['inferMetadataOwner'] = models_1.ObjectSerializer.serialize(inferMetadataOwner, "boolean");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param vid
     * @param eid
     * @param otype
     * @param oid
     * @param pid
     * @param body
     * @param linkDocumentId
     */
    MetadataApi.prototype.updateVEOPStandardContentPartMetadata = function (did, vid, eid, otype, oid, pid, body, linkDocumentId) {
        var localVarPath = this.basePath + '/api/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/p/{pid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'vid' + '}', encodeURIComponent(String(vid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'otype' + '}', encodeURIComponent(String(otype)))
            .replace('{' + 'oid' + '}', encodeURIComponent(String(oid)))
            .replace('{' + 'pid' + '}', encodeURIComponent(String(pid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }
        // verify required parameter 'vid' is not null or undefined
        if (vid === null || vid === undefined) {
            throw new Error('Required parameter vid was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }
        // verify required parameter 'otype' is not null or undefined
        if (otype === null || otype === undefined) {
            throw new Error('Required parameter otype was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }
        // verify required parameter 'oid' is not null or undefined
        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }
        // verify required parameter 'pid' is not null or undefined
        if (pid === null || pid === undefined) {
            throw new Error('Required parameter pid was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(body, "string")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wv
     * @param wvid
     * @param eid
     * @param body
     */
    MetadataApi.prototype.updateWVEMetadata = function (did, wv, wvid, eid, body) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wv}/{wvid}/e/{eid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wv' + '}', encodeURIComponent(String(wv)))
            .replace('{' + 'wvid' + '}', encodeURIComponent(String(wvid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling updateWVEMetadata.');
        }
        // verify required parameter 'wv' is not null or undefined
        if (wv === null || wv === undefined) {
            throw new Error('Required parameter wv was null or undefined when calling updateWVEMetadata.');
        }
        // verify required parameter 'wvid' is not null or undefined
        if (wvid === null || wvid === undefined) {
            throw new Error('Required parameter wvid was null or undefined when calling updateWVEMetadata.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling updateWVEMetadata.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateWVEMetadata.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(body, "string")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param subResource
     * @param body
     */
    MetadataApi.prototype.updateWVEPMetadata = function (did, wvm, wvmid, subResource, body) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p/{pid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'subResource' + '}', encodeURIComponent(String(subResource)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling updateWVEPMetadata.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling updateWVEPMetadata.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling updateWVEPMetadata.');
        }
        // verify required parameter 'subResource' is not null or undefined
        if (subResource === null || subResource === undefined) {
            throw new Error('Required parameter subResource was null or undefined when calling updateWVEPMetadata.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateWVEPMetadata.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(body, "string")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wv
     * @param wvid
     * @param body
     */
    MetadataApi.prototype.updateWVMetadata = function (did, wv, wvid, body) {
        var localVarPath = this.basePath + '/api/metadata/d/{did}/{wv}/{wvid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wv' + '}', encodeURIComponent(String(wv)))
            .replace('{' + 'wvid' + '}', encodeURIComponent(String(wvid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling updateWVMetadata.');
        }
        // verify required parameter 'wv' is not null or undefined
        if (wv === null || wv === undefined) {
            throw new Error('Required parameter wv was null or undefined when calling updateWVMetadata.');
        }
        // verify required parameter 'wvid' is not null or undefined
        if (wvid === null || wvid === undefined) {
            throw new Error('Required parameter wvid was null or undefined when calling updateWVMetadata.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateWVMetadata.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(body, "string")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return MetadataApi;
}());
exports.MetadataApi = MetadataApi;
