"use strict";
/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.96
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
var models_1 = require("../model/models");
var defaultBasePath = 'https://cad.onshape.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var AssembliesApiApiKeys;
(function (AssembliesApiApiKeys) {
})(AssembliesApiApiKeys = exports.AssembliesApiApiKeys || (exports.AssembliesApiApiKeys = {}));
var AssembliesApi = /** @class */ (function () {
    function AssembliesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'OAuth2': new models_1.OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AssembliesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssembliesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AssembliesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AssembliesApi.prototype.setApiKey = function (key, value) {
        this.authentications[AssembliesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(AssembliesApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OAuth2.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param body
     */
    AssembliesApi.prototype.addFeature = function (did, wvm, wvmid, eid, body) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling addFeature.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling addFeature.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling addFeature.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling addFeature.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(body, "string")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wid
     * @param bTModelElementParams
     */
    AssembliesApi.prototype.createAssembly = function (did, wid, bTModelElementParams) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling createAssembly.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling createAssembly.');
        }
        // verify required parameter 'bTModelElementParams' is not null or undefined
        if (bTModelElementParams === null || bTModelElementParams === undefined) {
            throw new Error('Required parameter bTModelElementParams was null or undefined when calling createAssembly.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTModelElementParams, "BTModelElementParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wid
     * @param eid
     * @param bTAssemblyInstanceDefinitionParams
     */
    AssembliesApi.prototype.createInstance1 = function (did, wid, eid, bTAssemblyInstanceDefinitionParams) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/instances'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling createInstance1.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling createInstance1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling createInstance1.');
        }
        // verify required parameter 'bTAssemblyInstanceDefinitionParams' is not null or undefined
        if (bTAssemblyInstanceDefinitionParams === null || bTAssemblyInstanceDefinitionParams === undefined) {
            throw new Error('Required parameter bTAssemblyInstanceDefinitionParams was null or undefined when calling createInstance1.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAssemblyInstanceDefinitionParams, "BTAssemblyInstanceDefinitionParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wid
     * @param eid
     * @param fid
     */
    AssembliesApi.prototype.deleteFeature2 = function (did, wid, eid, fid) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'fid' + '}', encodeURIComponent(String(fid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling deleteFeature2.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling deleteFeature2.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling deleteFeature2.');
        }
        // verify required parameter 'fid' is not null or undefined
        if (fid === null || fid === undefined) {
            throw new Error('Required parameter fid was null or undefined when calling deleteFeature2.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param eid
     * @param wid
     * @param nid
     */
    AssembliesApi.prototype.deleteInstance1 = function (did, eid, wid, nid) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/instance/nodeid/{nid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)))
            .replace('{' + 'nid' + '}', encodeURIComponent(String(nid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling deleteInstance1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling deleteInstance1.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling deleteInstance1.');
        }
        // verify required parameter 'nid' is not null or undefined
        if (nid === null || nid === undefined) {
            throw new Error('Required parameter nid was null or undefined when calling deleteInstance1.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param linkDocumentId
     * @param includeMateFeatures
     * @param includeNonSolids
     * @param includeMateConnectors
     * @param configuration
     */
    AssembliesApi.prototype.getAssemblyDefinition1 = function (did, wvm, wvmid, eid, linkDocumentId, includeMateFeatures, includeNonSolids, includeMateConnectors, configuration) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getAssemblyDefinition1.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getAssemblyDefinition1.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getAssemblyDefinition1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getAssemblyDefinition1.');
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (includeMateFeatures !== undefined) {
            localVarQueryParameters['includeMateFeatures'] = models_1.ObjectSerializer.serialize(includeMateFeatures, "boolean");
        }
        if (includeNonSolids !== undefined) {
            localVarQueryParameters['includeNonSolids'] = models_1.ObjectSerializer.serialize(includeNonSolids, "boolean");
        }
        if (includeMateConnectors !== undefined) {
            localVarQueryParameters['includeMateConnectors'] = models_1.ObjectSerializer.serialize(includeMateConnectors, "boolean");
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param metadataWorkspaceId
     * @param bomColumnIds
     * @param indented
     * @param multiLevel
     * @param generateIfAbsent
     * @param linkDocumentId
     * @param configuration
     */
    AssembliesApi.prototype.getBillOfMaterials1 = function (did, wvm, wvmid, eid, metadataWorkspaceId, bomColumnIds, indented, multiLevel, generateIfAbsent, linkDocumentId, configuration) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/bom'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getBillOfMaterials1.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getBillOfMaterials1.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getBillOfMaterials1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getBillOfMaterials1.');
        }
        if (metadataWorkspaceId !== undefined) {
            localVarQueryParameters['metadataWorkspaceId'] = models_1.ObjectSerializer.serialize(metadataWorkspaceId, "string");
        }
        if (bomColumnIds !== undefined) {
            localVarQueryParameters['bomColumnIds'] = models_1.ObjectSerializer.serialize(bomColumnIds, "Array<string>");
        }
        if (indented !== undefined) {
            localVarQueryParameters['indented'] = models_1.ObjectSerializer.serialize(indented, "boolean");
        }
        if (multiLevel !== undefined) {
            localVarQueryParameters['multiLevel'] = models_1.ObjectSerializer.serialize(multiLevel, "boolean");
        }
        if (generateIfAbsent !== undefined) {
            localVarQueryParameters['generateIfAbsent'] = models_1.ObjectSerializer.serialize(generateIfAbsent, "boolean");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param linkDocumentId
     * @param includeHidden
     * @param displayStateId
     * @param configuration
     */
    AssembliesApi.prototype.getBoundingBoxes = function (did, wvm, wvmid, eid, linkDocumentId, includeHidden, displayStateId, configuration) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getBoundingBoxes.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getBoundingBoxes.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getBoundingBoxes.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getBoundingBoxes.');
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (includeHidden !== undefined) {
            localVarQueryParameters['includeHidden'] = models_1.ObjectSerializer.serialize(includeHidden, "boolean");
        }
        if (displayStateId !== undefined) {
            localVarQueryParameters['displayStateId'] = models_1.ObjectSerializer.serialize(displayStateId, "string");
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     */
    AssembliesApi.prototype.getFeatureSpecs3 = function (did, wvm, wvmid, eid) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getFeatureSpecs3.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getFeatureSpecs3.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getFeatureSpecs3.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getFeatureSpecs3.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param featureId
     * @param linkDocumentId
     */
    AssembliesApi.prototype.getFeatures2 = function (did, wvm, wvmid, eid, featureId, linkDocumentId) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getFeatures2.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getFeatures2.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getFeatures2.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getFeatures2.');
        }
        if (featureId !== undefined) {
            localVarQueryParameters['featureId'] = models_1.ObjectSerializer.serialize(featureId, "Array<string>");
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param eid
     * @param skipPerspective
     */
    AssembliesApi.prototype.getNamedViews1 = function (did, eid, skipPerspective) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/e/{eid}/namedViews'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getNamedViews1.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getNamedViews1.');
        }
        if (skipPerspective !== undefined) {
            localVarQueryParameters['skipPerspective'] = models_1.ObjectSerializer.serialize(skipPerspective, "boolean");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wid
     * @param eid
     */
    AssembliesApi.prototype.getOrCreateBillOfMaterialsElement = function (did, wid, eid) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/bomelement'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getOrCreateBillOfMaterialsElement.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling getOrCreateBillOfMaterialsElement.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getOrCreateBillOfMaterialsElement.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wvm
     * @param wvmid
     * @param eid
     * @param linkDocumentId
     * @param viewMatrix
     * @param outputHeight
     * @param outputWidth
     * @param pixelSize
     * @param edges
     * @param showAllParts
     * @param includeSurfaces
     * @param useAntiAliasing
     * @param displayStateId
     * @param configuration
     */
    AssembliesApi.prototype.getShadedViews3 = function (did, wvm, wvmid, eid, linkDocumentId, viewMatrix, outputHeight, outputWidth, pixelSize, edges, showAllParts, includeSurfaces, useAntiAliasing, displayStateId, configuration) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wvm' + '}', encodeURIComponent(String(wvm)))
            .replace('{' + 'wvmid' + '}', encodeURIComponent(String(wvmid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getShadedViews3.');
        }
        // verify required parameter 'wvm' is not null or undefined
        if (wvm === null || wvm === undefined) {
            throw new Error('Required parameter wvm was null or undefined when calling getShadedViews3.');
        }
        // verify required parameter 'wvmid' is not null or undefined
        if (wvmid === null || wvmid === undefined) {
            throw new Error('Required parameter wvmid was null or undefined when calling getShadedViews3.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getShadedViews3.');
        }
        if (linkDocumentId !== undefined) {
            localVarQueryParameters['linkDocumentId'] = models_1.ObjectSerializer.serialize(linkDocumentId, "string");
        }
        if (viewMatrix !== undefined) {
            localVarQueryParameters['viewMatrix'] = models_1.ObjectSerializer.serialize(viewMatrix, "string");
        }
        if (outputHeight !== undefined) {
            localVarQueryParameters['outputHeight'] = models_1.ObjectSerializer.serialize(outputHeight, "number");
        }
        if (outputWidth !== undefined) {
            localVarQueryParameters['outputWidth'] = models_1.ObjectSerializer.serialize(outputWidth, "number");
        }
        if (pixelSize !== undefined) {
            localVarQueryParameters['pixelSize'] = models_1.ObjectSerializer.serialize(pixelSize, "number");
        }
        if (edges !== undefined) {
            localVarQueryParameters['edges'] = models_1.ObjectSerializer.serialize(edges, "string");
        }
        if (showAllParts !== undefined) {
            localVarQueryParameters['showAllParts'] = models_1.ObjectSerializer.serialize(showAllParts, "boolean");
        }
        if (includeSurfaces !== undefined) {
            localVarQueryParameters['includeSurfaces'] = models_1.ObjectSerializer.serialize(includeSurfaces, "boolean");
        }
        if (useAntiAliasing !== undefined) {
            localVarQueryParameters['useAntiAliasing'] = models_1.ObjectSerializer.serialize(useAntiAliasing, "boolean");
        }
        if (displayStateId !== undefined) {
            localVarQueryParameters['displayStateId'] = models_1.ObjectSerializer.serialize(displayStateId, "string");
        }
        if (configuration !== undefined) {
            localVarQueryParameters['configuration'] = models_1.ObjectSerializer.serialize(configuration, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wid
     * @param eid
     * @param checkContent
     */
    AssembliesApi.prototype.getTranslatorFormats = function (did, wid, eid, checkContent) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/translationformats'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling getTranslatorFormats.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling getTranslatorFormats.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling getTranslatorFormats.');
        }
        if (checkContent !== undefined) {
            localVarQueryParameters['checkContent'] = models_1.ObjectSerializer.serialize(checkContent, "boolean");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param eid
     * @param wid
     * @param bTAssemblyTransformedInstancesDefinitionParams
     */
    AssembliesApi.prototype.insertTransformedInstances = function (did, eid, wid, bTAssemblyTransformedInstancesDefinitionParams) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/transformedinstances'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling insertTransformedInstances.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling insertTransformedInstances.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling insertTransformedInstances.');
        }
        // verify required parameter 'bTAssemblyTransformedInstancesDefinitionParams' is not null or undefined
        if (bTAssemblyTransformedInstancesDefinitionParams === null || bTAssemblyTransformedInstancesDefinitionParams === undefined) {
            throw new Error('Required parameter bTAssemblyTransformedInstancesDefinitionParams was null or undefined when calling insertTransformedInstances.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAssemblyTransformedInstancesDefinitionParams, "BTAssemblyTransformedInstancesDefinitionParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param eid
     * @param wid
     * @param bTAssemblyTransformDefinitionParams
     */
    AssembliesApi.prototype.transformOccurrences = function (did, eid, wid, bTAssemblyTransformDefinitionParams) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/occurrencetransforms'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling transformOccurrences.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling transformOccurrences.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling transformOccurrences.');
        }
        // verify required parameter 'bTAssemblyTransformDefinitionParams' is not null or undefined
        if (bTAssemblyTransformDefinitionParams === null || bTAssemblyTransformDefinitionParams === undefined) {
            throw new Error('Required parameter bTAssemblyTransformDefinitionParams was null or undefined when calling transformOccurrences.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTAssemblyTransformDefinitionParams, "BTAssemblyTransformDefinitionParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wv
     * @param wvid
     * @param eid
     * @param bTTranslateFormatParams
     */
    AssembliesApi.prototype.translateFormat = function (did, wv, wvid, eid, bTTranslateFormatParams) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/translations'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wv' + '}', encodeURIComponent(String(wv)))
            .replace('{' + 'wvid' + '}', encodeURIComponent(String(wvid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling translateFormat.');
        }
        // verify required parameter 'wv' is not null or undefined
        if (wv === null || wv === undefined) {
            throw new Error('Required parameter wv was null or undefined when calling translateFormat.');
        }
        // verify required parameter 'wvid' is not null or undefined
        if (wvid === null || wvid === undefined) {
            throw new Error('Required parameter wvid was null or undefined when calling translateFormat.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling translateFormat.');
        }
        // verify required parameter 'bTTranslateFormatParams' is not null or undefined
        if (bTTranslateFormatParams === null || bTTranslateFormatParams === undefined) {
            throw new Error('Required parameter bTTranslateFormatParams was null or undefined when calling translateFormat.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(bTTranslateFormatParams, "BTTranslateFormatParams")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param did
     * @param wid
     * @param eid
     * @param fid
     * @param body
     */
    AssembliesApi.prototype.updateFeature2 = function (did, wid, eid, fid, body) {
        var localVarPath = this.basePath + '/api/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)))
            .replace('{' + 'eid' + '}', encodeURIComponent(String(eid)))
            .replace('{' + 'fid' + '}', encodeURIComponent(String(fid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling updateFeature2.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling updateFeature2.');
        }
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling updateFeature2.');
        }
        // verify required parameter 'fid' is not null or undefined
        if (fid === null || fid === undefined) {
            throw new Error('Required parameter fid was null or undefined when calling updateFeature2.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(body, "string")
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AssembliesApi;
}());
exports.AssembliesApi = AssembliesApi;
