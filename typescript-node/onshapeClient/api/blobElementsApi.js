"use strict";
/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.96
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
var models_1 = require("../model/models");
var defaultBasePath = 'https://cad.onshape.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var BlobElementsApiApiKeys;
(function (BlobElementsApiApiKeys) {
})(BlobElementsApiApiKeys = exports.BlobElementsApiApiKeys || (exports.BlobElementsApiApiKeys = {}));
var BlobElementsApi = /** @class */ (function () {
    function BlobElementsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'OAuth2': new models_1.OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(BlobElementsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BlobElementsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    BlobElementsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    BlobElementsApi.prototype.setApiKey = function (key, value) {
        this.authentications[BlobElementsApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(BlobElementsApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OAuth2.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param did
     * @param wid
     * @param contentDisposition
     * @param entity
     * @param headers
     * @param mediaType
     * @param messageBodyWorkers
     * @param parent
     * @param providers
     * @param bodyParts
     * @param parameterizedHeaders
     */
    BlobElementsApi.prototype.uploadFileCreateElement = function (did, wid, contentDisposition, entity, headers, mediaType, messageBodyWorkers, parent, providers, bodyParts, parameterizedHeaders) {
        var localVarPath = this.basePath + '/api/blobelements/d/{did}/w/{wid}'
            .replace('{' + 'did' + '}', encodeURIComponent(String(did)))
            .replace('{' + 'wid' + '}', encodeURIComponent(String(wid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling uploadFileCreateElement.');
        }
        // verify required parameter 'wid' is not null or undefined
        if (wid === null || wid === undefined) {
            throw new Error('Required parameter wid was null or undefined when calling uploadFileCreateElement.');
        }
        var localVarUseFormData = false;
        if (contentDisposition !== undefined) {
            localVarFormParams['contentDisposition'] = models_1.ObjectSerializer.serialize(contentDisposition, "ContentDisposition");
        }
        if (entity !== undefined) {
            localVarFormParams['entity'] = models_1.ObjectSerializer.serialize(entity, "any");
        }
        if (headers !== undefined) {
            localVarFormParams['headers'] = models_1.ObjectSerializer.serialize(headers, "BodyPartHeaders");
        }
        if (mediaType !== undefined) {
            localVarFormParams['mediaType'] = models_1.ObjectSerializer.serialize(mediaType, "BodyPartMediaType");
        }
        if (messageBodyWorkers !== undefined) {
            localVarFormParams['messageBodyWorkers'] = models_1.ObjectSerializer.serialize(messageBodyWorkers, "MessageBodyWorkers");
        }
        if (parent !== undefined) {
            localVarFormParams['parent'] = models_1.ObjectSerializer.serialize(parent, "MultiPart");
        }
        if (providers !== undefined) {
            localVarFormParams['providers'] = models_1.ObjectSerializer.serialize(providers, "any");
        }
        if (bodyParts !== undefined) {
            localVarFormParams['bodyParts'] = models_1.ObjectSerializer.serialize(bodyParts, "Array<BodyPart>");
        }
        if (parameterizedHeaders !== undefined) {
            localVarFormParams['parameterizedHeaders'] = models_1.ObjectSerializer.serialize(parameterizedHeaders, "BodyPartHeaders");
        }
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return BlobElementsApi;
}());
exports.BlobElementsApi = BlobElementsApi;
