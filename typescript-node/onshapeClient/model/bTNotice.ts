/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.96
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BTConnection } from './bTConnection';
import { BTLocationInfo } from './bTLocationInfo';
import { BTNodeReference } from './bTNodeReference';
import { BTObjectId } from './bTObjectId';

export class BTNotice {
    'locationInfos'?: Array<BTLocationInfo>;
    'message'?: string;
    'stackTrace'?: Array<BTLocationInfo>;
    'type'?: BTNotice.TypeEnum;
    'level'?: BTNotice.LevelEnum;
    'parameterId'?: string;
    'firstChildField'?: number;
    'childListIndices'?: Array<number>;
    'changeableChildFieldIndices'?: Array<number>;
    'tryNode'?: BTNodeReference;
    'nodeId'?: string;
    'childMapIndices'?: Array<number>;
    'atomicChildIndices'?: Array<number>;
    'nodeIdRaw'?: BTObjectId;
    'typeId'?: number;
    'connectionSource'?: BTConnection;
    'exportTypeName'?: string;
    'unknownClass'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "locationInfos",
            "baseName": "locationInfos",
            "type": "Array<BTLocationInfo>"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "stackTrace",
            "baseName": "stackTrace",
            "type": "Array<BTLocationInfo>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "BTNotice.TypeEnum"
        },
        {
            "name": "level",
            "baseName": "level",
            "type": "BTNotice.LevelEnum"
        },
        {
            "name": "parameterId",
            "baseName": "parameterId",
            "type": "string"
        },
        {
            "name": "firstChildField",
            "baseName": "firstChildField",
            "type": "number"
        },
        {
            "name": "childListIndices",
            "baseName": "childListIndices",
            "type": "Array<number>"
        },
        {
            "name": "changeableChildFieldIndices",
            "baseName": "changeableChildFieldIndices",
            "type": "Array<number>"
        },
        {
            "name": "tryNode",
            "baseName": "tryNode",
            "type": "BTNodeReference"
        },
        {
            "name": "nodeId",
            "baseName": "nodeId",
            "type": "string"
        },
        {
            "name": "childMapIndices",
            "baseName": "childMapIndices",
            "type": "Array<number>"
        },
        {
            "name": "atomicChildIndices",
            "baseName": "atomicChildIndices",
            "type": "Array<number>"
        },
        {
            "name": "nodeIdRaw",
            "baseName": "nodeIdRaw",
            "type": "BTObjectId"
        },
        {
            "name": "typeId",
            "baseName": "typeId",
            "type": "number"
        },
        {
            "name": "connectionSource",
            "baseName": "connectionSource",
            "type": "BTConnection"
        },
        {
            "name": "exportTypeName",
            "baseName": "exportTypeName",
            "type": "string"
        },
        {
            "name": "unknownClass",
            "baseName": "unknownClass",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return BTNotice.attributeTypeMap;
    }
}

export namespace BTNotice {
    export enum TypeEnum {
        PARSE = <any> 'PARSE',
        SEMANTIC = <any> 'SEMANTIC',
        EXECUTION = <any> 'EXECUTION',
        GEOMETRY = <any> 'GEOMETRY',
        TEST = <any> 'TEST',
        OTHER = <any> 'OTHER',
        UNKNOWN = <any> 'UNKNOWN'
    }
    export enum LevelEnum {
        INTERNAL = <any> 'INTERNAL',
        ERROR = <any> 'ERROR',
        WARNING = <any> 'WARNING',
        INFO = <any> 'INFO',
        UNKNOWN = <any> 'UNKNOWN'
    }
}
